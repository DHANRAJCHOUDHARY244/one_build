{
  "compilerOptions": {
    "target": "ESNext", // The target version of the compiled code (ECMAScript).
    "module": "ESNext", // The module system type used. ESNext supports more features, such as dynamic import, etc.
    "lib": ["ESNext", "DOM", "DOM.Iterable"], // Library file to include. DOM, DOM.Iterable and ESNext library files are relatively basic dependencies in TypeScript development.
    "useDefineForClassFields": true,
    "skipLibCheck": true, // Skip the compiler's check of imported library files to speed up the build
    "allowJs": true, // Allow JavaScript files to be compiled

    /* Bundler mode */
    "moduleResolution": "bundler",
    "sourceMap": true, // Output *.map file to provide source code mapping
    "declaration": true, // Whether to generate a declaration file (.d.ts).
    "preserveWatchOutput": true, // This option allows previously compiled files to be preserved in watch mode, thus avoiding recompilation caused by deleting changed files during incremental compilation.
    "removeComments": true, // Whether to remove comments. Can increase compilation speed and reduce generated file size
    "allowImportingTsExtensions": true, // Allow modules with .ts or .tsx extensions to be imported in the import statement without explicitly specifying the extension.
    "resolveJsonModule": true, // Allow import of json module
    "isolatedModules": true, // Let typescript process each file as an independent unit (can speed up compilation)
    "noEmit": true, // The compiler does not generate any JS files
    "jsx": "react-jsx",
    // Make TypeScript more compatible with CommonJS modules. When using the CommonJS module system, the exported module will be wrapped in an object because CommonJS uses a syntax similar to module.exports to export modules.
    // Some tools and libraries may need to import these CommonJS modules as ES6 modules. In this case, you can turn on the esModuleInterop option.
    // After turning it on, you no longer need to use the default export when importing CommonJS modules to import them correctly, nor do you need to manually handle require() and module.exports.
    // This makes the process of importing and using CommonJS modules simpler and more convenient.
    "esModuleInterop": true,

    /* Linting */
   "strict": true, // Enable all strict type checking options
    "strictNullChecks": true, // Perform strict checks on null values
    "noImplicitAny": true, // disable implicit any type
    "noUnusedLocals": true, // Eliminate warnings generated by unused variables
    "noUnusedParameters": true, // Eliminate warnings generated by unused parameters
    "noFallthroughCasesInSwitch": true, // Avoid switch statements falling into traps
    "useUnknownInCatchVariables": false, // When true, the variable type declared in the catch block will be treated as unknown instead of the default any.

    // https://vitejs.dev/guide/features#client-types
    "types": ["vite/client"],

    "baseUrl": ".",
    /* alias */
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["types/*"]
    }
  },
  "include": ["src", "types"],
  "exclude": ["node_modules", "dist"]
}
